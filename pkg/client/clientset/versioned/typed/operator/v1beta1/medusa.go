// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/danieloliveira079/kubebuilder-example/pkg/apis/operator/v1beta1"
	scheme "github.com/danieloliveira079/kubebuilder-example/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MedusasGetter has a method to return a MedusaInterface.
// A group's client should implement this interface.
type MedusasGetter interface {
	Medusas(namespace string) MedusaInterface
}

// MedusaInterface has methods to work with Medusa resources.
type MedusaInterface interface {
	Create(*v1beta1.Medusa) (*v1beta1.Medusa, error)
	Update(*v1beta1.Medusa) (*v1beta1.Medusa, error)
	UpdateStatus(*v1beta1.Medusa) (*v1beta1.Medusa, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.Medusa, error)
	List(opts v1.ListOptions) (*v1beta1.MedusaList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Medusa, err error)
	MedusaExpansion
}

// medusas implements MedusaInterface
type medusas struct {
	client rest.Interface
	ns     string
}

// newMedusas returns a Medusas
func newMedusas(c *OperatorV1beta1Client, namespace string) *medusas {
	return &medusas{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the medusa, and returns the corresponding medusa object, and an error if there is any.
func (c *medusas) Get(name string, options v1.GetOptions) (result *v1beta1.Medusa, err error) {
	result = &v1beta1.Medusa{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("medusas").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Medusas that match those selectors.
func (c *medusas) List(opts v1.ListOptions) (result *v1beta1.MedusaList, err error) {
	result = &v1beta1.MedusaList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("medusas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested medusas.
func (c *medusas) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("medusas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a medusa and creates it.  Returns the server's representation of the medusa, and an error, if there is any.
func (c *medusas) Create(medusa *v1beta1.Medusa) (result *v1beta1.Medusa, err error) {
	result = &v1beta1.Medusa{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("medusas").
		Body(medusa).
		Do().
		Into(result)
	return
}

// Update takes the representation of a medusa and updates it. Returns the server's representation of the medusa, and an error, if there is any.
func (c *medusas) Update(medusa *v1beta1.Medusa) (result *v1beta1.Medusa, err error) {
	result = &v1beta1.Medusa{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("medusas").
		Name(medusa.Name).
		Body(medusa).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *medusas) UpdateStatus(medusa *v1beta1.Medusa) (result *v1beta1.Medusa, err error) {
	result = &v1beta1.Medusa{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("medusas").
		Name(medusa.Name).
		SubResource("status").
		Body(medusa).
		Do().
		Into(result)
	return
}

// Delete takes name of the medusa and deletes it. Returns an error if one occurs.
func (c *medusas) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("medusas").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *medusas) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("medusas").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched medusa.
func (c *medusas) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Medusa, err error) {
	result = &v1beta1.Medusa{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("medusas").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
