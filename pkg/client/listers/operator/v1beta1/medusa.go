// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/danieloliveira079/kubebuilder-example/pkg/apis/operator/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MedusaLister helps list Medusas.
type MedusaLister interface {
	// List lists all Medusas in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.Medusa, err error)
	// Medusas returns an object that can list and get Medusas.
	Medusas(namespace string) MedusaNamespaceLister
	MedusaListerExpansion
}

// medusaLister implements the MedusaLister interface.
type medusaLister struct {
	indexer cache.Indexer
}

// NewMedusaLister returns a new MedusaLister.
func NewMedusaLister(indexer cache.Indexer) MedusaLister {
	return &medusaLister{indexer: indexer}
}

// List lists all Medusas in the indexer.
func (s *medusaLister) List(selector labels.Selector) (ret []*v1beta1.Medusa, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Medusa))
	})
	return ret, err
}

// Medusas returns an object that can list and get Medusas.
func (s *medusaLister) Medusas(namespace string) MedusaNamespaceLister {
	return medusaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MedusaNamespaceLister helps list and get Medusas.
type MedusaNamespaceLister interface {
	// List lists all Medusas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.Medusa, err error)
	// Get retrieves the Medusa from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.Medusa, error)
	MedusaNamespaceListerExpansion
}

// medusaNamespaceLister implements the MedusaNamespaceLister
// interface.
type medusaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Medusas in the indexer for a given namespace.
func (s medusaNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Medusa, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Medusa))
	})
	return ret, err
}

// Get retrieves the Medusa from the indexer for a given namespace and name.
func (s medusaNamespaceLister) Get(name string) (*v1beta1.Medusa, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("medusa"), name)
	}
	return obj.(*v1beta1.Medusa), nil
}
